// Generated by Gemini
// Module to generate test data for udp_top tx path
`timescale 1ns / 1ps `default_nettype none

module gen_testdata_2 #(
    parameter DATA_W = 16,
    parameter SYS_FREQ = 125_000,
    parameter AD7380_DIV_FREQ = 47 * 2,
    parameter SAMPLE_CNT_MAX = 1000,
    parameter PACKET_NUM = 1000
) (
    input wire clk,
    input wire rst,
    (*mark_debug = "false"*)input wire start_flag,

    (*mark_debug = "false"*)output reg  [DATA_W-1:0] data_out,
    (*mark_debug = "false"*)output wire              valid_out,
    (*mark_debug = "false"*)output wire              last_out
);

    (*mark_debug = "false"*)reg  [                       31:0] cnt_1s = 32'd0;
    (*mark_debug = "false"*)wire [                      1-1:0] sample_flag;
    (*mark_debug = "false"*)reg  [$clog2(AD7380_DIV_FREQ)-1:0] cnt = 0;
    (*mark_debug = "false"*)reg  [                      1-1:0] start_flag_d1;
    (*mark_debug = "false"*)reg  [                      1-1:0] start_flag_d2;
    (*mark_debug = "false"*)wire [                      1-1:0] start_flag_pos;
    (*mark_debug = "false"*)reg  [                       31:0] packet_cnt = 0;
    always @(posedge clk) begin
        if (rst) begin
            start_flag_d1 <= 0;
            start_flag_d2 <= 0;
        end else begin
            start_flag_d1 <= start_flag;
            start_flag_d2 <= start_flag_d1;
        end
    end
    assign start_flag_pos = ~start_flag_d2 & start_flag_d1;

    //**********************************************************************************************
    //function
    //**********************************************************************************************

    always @(posedge clk) begin
        if (rst) cnt_1s <= 32'hffff_ffff;
        else if (start_flag_pos) cnt_1s <= SYS_FREQ - 1;
        else if (cnt_1s == 0) cnt_1s <= cnt_1s;
        else cnt_1s <= cnt_1s - 1;
    end
    assign sample_flag = cnt_1s > 0 && cnt_1s < SYS_FREQ && packet_cnt <= PACKET_NUM-1;

    always @(posedge clk) begin
        if (rst) begin
            cnt <= 0;
        end else if (sample_flag) begin
            if (cnt == AD7380_DIV_FREQ - 1) cnt <= 0;
            else cnt <= cnt + 1;
        end else cnt <= 0;
    end
    wire dataout_valid;
    assign dataout_valid = sample_flag && cnt == AD7380_DIV_FREQ - 1;

    (*mark_debug = "false"*)reg [32-1:0] sample_cnt;
    always @(posedge clk) begin
        if (rst) sample_cnt <= 32'd0;
        else if (sample_flag) begin
            if (sample_cnt == SAMPLE_CNT_MAX - 1) sample_cnt <= dataout_valid ? 32'd0 : sample_cnt;
            else sample_cnt <= dataout_valid ? sample_cnt + 1 : sample_cnt;
        end else sample_cnt <= 32'd0;
    end

    always @(posedge clk) begin
        if (rst) packet_cnt <= 32'd0;
        else if (start_flag_pos) packet_cnt <= 32'd0;
        else if (last_out) packet_cnt <= packet_cnt + 1;
        else packet_cnt <= packet_cnt;
    end
    always @(posedge clk) begin
        if (rst) begin
            data_out <= {DATA_W{1'b0}};
        end else if (sample_flag) begin
            data_out <= dataout_valid ? data_out + 1 : data_out;
        end else data_out <= 0;
    end
    assign valid_out = dataout_valid;
    assign last_out  = sample_flag && sample_cnt == SAMPLE_CNT_MAX - 1 && dataout_valid;

endmodule
